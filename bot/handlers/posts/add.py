from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime, timezone, timedelta
from sqlalchemy.future import select

from bot.services.crud.post import create_post
from bot.services.ai import OpenAIService
from bot.keyboards.inline.workflows import (
    get_theme_selection_keyboard,
    get_style_selection_keyboard, 
    get_content_length_keyboard,
    get_media_type_keyboard,
    get_language_selection_keyboard,
    get_time_selection_keyboard
)

router = Router()

class AddPostStates(StatesGroup):
    choosing_account = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
    choosing_creation_method = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    choosing_theme = State()
    entering_custom_theme = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π —Ç–µ–º–∞—Ç–∏–∫–∏
    choosing_style = State()
    choosing_content_length = State()
    choosing_media_type = State()
    choosing_language = State()
    entering_topic = State()
    choosing_content_method = State()
    entering_content = State()
    generating_ai_content = State()
    confirming_post = State()
    choosing_publish_time = State()  # –ù–æ–≤—ã–π —ç—Ç–∞–ø


async def add_post_start(callback: CallbackQuery, session, user, i18n, state: FSMContext, **_):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    await callback.answer()
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    from bot.services.crud.socials import get_social_accounts_by_user_id
    accounts = await get_social_accounts_by_user_id(session, user.id)
    
    if not accounts:
        await callback.message.answer(
            i18n.get("post.add.no_accounts", "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ '–°–æ—Ü—Å–µ—Ç–∏'.")
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã
    from bot.services.crud.subscription import get_active_subscription
    from bot.services.crud.usage_stats import get_user_usage_stats
    from bot.services.crud.user import can_create_free_post, get_free_posts_remaining
    
    subscription = await get_active_subscription(session, user.id)
    
    if not subscription:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
        from bot.services.crud.user import get_free_posts_info
        free_posts_info = await get_free_posts_info(session, user.id)
        
        if not free_posts_info['can_create']:
            await callback.message.answer(
                i18n.get("post.add.free_posts_exceeded", "‚ùå –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ {limit} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤.").format(limit=free_posts_info['limit'])
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ—Å—Ç–∞—Ö
        await state.update_data(is_free_post=True)
    else:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        usage_stats = await get_user_usage_stats(session, user.id)
        if usage_stats and usage_stats.posts_used >= subscription.plan.posts_limit:
            await callback.message.answer(
                i18n.get("post.add.limit_exceeded", "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤ –ø–æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ. –û–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤.")
            )
            return
        
        await state.update_data(is_free_post=False)
    
    await callback.message.delete()
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
    text = i18n.get("post.add.choose_account", "üì± –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
    
    from bot.keyboards.inline.workflows import get_account_selection_keyboard
    msg = await callback.message.answer(text, reply_markup=get_account_selection_keyboard(accounts))
    await state.set_state(AddPostStates.choosing_account)
    await state.update_data(prev_msg_id=msg.message_id)


async def process_account_selection(callback: CallbackQuery, state: FSMContext, i18n, **_):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    await callback.answer()
    account_id = int(callback.data.split(":")[-1])
    
    data = await state.get_data()
    try:
        if msg_id := data.get("prev_msg_id"):
            await callback.bot.delete_message(callback.message.chat.id, msg_id)
    except: 
        pass
    
    await state.update_data(social_account_id=account_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ—Å—Ç–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
    is_free_post = data.get("is_free_post", False)
    
    if is_free_post:
        from bot.services.crud.user import get_free_posts_info
        session = callback.bot.get("session")
        free_posts_info = await get_free_posts_info(session, callback.from_user.id)
        
        text = i18n.get("post.add.free_posts_available", "üéÅ –£ –≤–∞—Å –µ—Å—Ç—å {remaining} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤!").format(remaining=free_posts_info['remaining'])
        text += "\n\n" + i18n.get("post.add.choose_creation_method", "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:")
        
        from bot.keyboards.inline.posts import get_post_creation_method_keyboard
        msg = await callback.message.answer(text, reply_markup=get_post_creation_method_keyboard(i18n))
        await state.set_state(AddPostStates.choosing_creation_method)
        await state.update_data(prev_msg_id=msg.message_id)
    else:
        # –î–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        text = i18n.get("post.add.choose_creation_method", "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:")
        
        from bot.keyboards.inline.posts import get_post_creation_method_keyboard
        msg = await callback.message.answer(text, reply_markup=get_post_creation_method_keyboard(i18n))
        await state.set_state(AddPostStates.choosing_creation_method)
        await state.update_data(prev_msg_id=msg.message_id)


async def process_creation_method_selection(callback: CallbackQuery, state: FSMContext, i18n, **_):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    await callback.answer()
    method = callback.data.split(":")[-1]
    
    data = await state.get_data()
    try:
        if msg_id := data.get("prev_msg_id"):
            await callback.bot.delete_message(callback.message.chat.id, msg_id)
    except: 
        pass
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è
    await state.update_data(creation_method=method)
    
    if method == "workflow":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–¥–∞—á—É (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞)
        from bot.services.crud.workflow import get_user_workflows
        workflows = await get_user_workflows(callback.bot.get("session"), callback.from_user.id)
        
        if not workflows:
            await callback.message.answer(
                i18n.get("post.add.no_workflows", "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á—É.")
            )
            return
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
        text = i18n.get("post.add.choose_theme", "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –ø–æ—Å—Ç–∞:")
        from bot.keyboards.inline.workflows import get_theme_selection_keyboard
        msg = await callback.message.answer(text, reply_markup=get_theme_selection_keyboard(i18n))
        await state.set_state(AddPostStates.choosing_theme)
        await state.update_data(prev_msg_id=msg.message_id)
        
    elif method == "manual":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
        text = i18n.get("post.add.choose_theme", "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –ø–æ—Å—Ç–∞:")
        from bot.keyboards.inline.workflows import get_theme_selection_keyboard
        msg = await callback.message.answer(text, reply_markup=get_theme_selection_keyboard(i18n))
        await state.set_state(AddPostStates.choosing_theme)
        await state.update_data(prev_msg_id=msg.message_id)
    
    else:
        await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞.")


async def process_theme_selection(callback: CallbackQuery, state: FSMContext, i18n, **_):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã"""
    await callback.answer()
    theme = callback.data.split(":")[-1]
    
    data = await state.get_data()
    try:
        if msg_id := data.get("prev_msg_id"):
            await callback.bot.delete_message(callback.message.chat.id, msg_id)
    except: 
        pass
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–≤–æ—è —Ç–µ–º–∞—Ç–∏–∫–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É
    if theme == "custom":
        text = i18n.get("post.add.enter_custom_theme", "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ç–µ–º–∞—Ç–∏–∫—É –ø–æ—Å—Ç–∞:")
        msg = await callback.message.answer(text)
        await state.set_state(AddPostStates.entering_custom_theme)
        await state.update_data(prev_msg_id=msg.message_id)
    else:
        await state.update_data(theme=theme)
        
        text = i18n.get("post.add.choose_style", "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è:")
        msg = await callback.message.answer(text, reply_markup=get_style_selection_keyboard(i18n))
        await state.set_state(AddPostStates.choosing_style)
        await state.update_data(prev_msg_id=msg.message_id)


async def process_custom_theme(message: Message, state: FSMContext, i18n, **_):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π —Ç–µ–º–∞—Ç–∏–∫–∏"""
    custom_theme = message.text.strip()
    
    if len(custom_theme) < 3:
        await message.answer(i18n.get("post.add.theme_too_short", "‚ö†Ô∏è –¢–µ–º–∞—Ç–∏–∫–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞."))
        return
    
    if len(custom_theme) > 50:
        await message.answer(i18n.get("post.add.theme_too_long", "‚ö†Ô∏è –¢–µ–º–∞—Ç–∏–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤."))
        return
    
    data = await state.get_data()
    try:
        await message.delete()
        if msg_id := data.get("prev_msg_id"):
            await message.bot.delete_message(message.chat.id, msg_id)
    except: 
        pass
    
    await state.update_data(theme=custom_theme)
    
    text = i18n.get("post.add.choose_style", "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è:")
    msg = await message.answer(text, reply_markup=get_style_selection_keyboard(i18n))
    await state.set_state(AddPostStates.choosing_style)
    await state.update_data(prev_msg_id=msg.message_id)


async def process_style_selection(callback: CallbackQuery, state: FSMContext, i18n, **_):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è"""
    await callback.answer()
    style = callback.data.split(":")[-1]
    
    if style not in {"formal", "friendly", "humorous"}:
        await callback.message.answer(i18n.get("post.add.invalid_style", "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è."))
        return
    
    data = await state.get_data()
    try:
        if msg_id := data.get("prev_msg_id"):
            await callback.bot.delete_message(callback.message.chat.id, msg_id)
    except: 
        pass
    
    await state.update_data(writing_style=style)
    
    text = i18n.get("post.add.choose_content_length", "üìè –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞:")
    msg = await callback.message.answer(text, reply_markup=get_content_length_keyboard(i18n))
    await state.set_state(AddPostStates.choosing_content_length)
    await state.update_data(prev_msg_id=msg.message_id)


async def process_content_length_selection(callback: CallbackQuery, state: FSMContext, i18n, **_):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    await callback.answer()
    length = callback.data.split(":")[-1]
    
    if length not in {"short", "medium", "long"}:
        await callback.message.answer(i18n.get("post.add.invalid_length", "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª–∏–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞."))
        return
    
    data = await state.get_data()
    try:
        if msg_id := data.get("prev_msg_id"):
            await callback.bot.delete_message(callback.message.chat.id, msg_id)
    except: 
        pass
    
    await state.update_data(content_length=length)
    
    text = i18n.get("post.add.choose_media_type", "üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:")
    msg = await callback.message.answer(text, reply_markup=get_media_type_keyboard(i18n))
    await state.set_state(AddPostStates.choosing_media_type)
    await state.update_data(prev_msg_id=msg.message_id)


async def process_media_type_selection(callback: CallbackQuery, state: FSMContext, i18n, **_):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ–¥–∏–∞"""
    await callback.answer()
    media_type = callback.data.split(":")[-1]
    
    if media_type not in {"text", "image", "video", "carousel"}:
        await callback.message.answer(i18n.get("post.add.invalid_media", "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –º–µ–¥–∏–∞."))
        return
    
    data = await state.get_data()
    try:
        if msg_id := data.get("prev_msg_id"):
            await callback.bot.delete_message(callback.message.chat.id, msg_id)
    except: 
        pass
    
    await state.update_data(post_media_type=media_type)
    
    text = i18n.get("post.add.choose_language", "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:")
    msg = await callback.message.answer(text, reply_markup=get_language_selection_keyboard(i18n))
    await state.set_state(AddPostStates.choosing_language)
    await state.update_data(prev_msg_id=msg.message_id)


async def process_language_selection(callback: CallbackQuery, state: FSMContext, i18n, **_):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    await callback.answer()
    language = callback.data.split(":")[-1]
    
    data = await state.get_data()
    try:
        if msg_id := data.get("prev_msg_id"):
            await callback.bot.delete_message(callback.message.chat.id, msg_id)
    except: 
        pass
    
    await state.update_data(post_language=language)
    
    topic_prompt = i18n.get('post.add.topic_prompt', 'üí° –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø–æ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ö–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ ETF¬ª):')
    text = (
        f"üìù <b>{i18n.get('post.add.enter_topic', '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞')}</b>\n\n"
        f"{topic_prompt}"
    )
    
    msg = await callback.message.answer(text, parse_mode="HTML")
    await state.update_data(prev_msg_id=msg.message_id)
    await state.set_state(AddPostStates.entering_topic)


async def process_topic(message: Message, state: FSMContext, i18n, **_):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–º—ã –ø–æ—Å—Ç–∞"""
    topic = message.text.strip()
    
    if len(topic) < 5:
        await message.answer(i18n.get("post.add.topic_too_short", "‚ö†Ô∏è –¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤."))
        return
    
    if len(topic) > 200:
        await message.answer(i18n.get("post.add.topic_too_long", "‚ö†Ô∏è –¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤."))
        return
    
    data = await state.get_data()
    try:
        await message.delete()
        if msg_id := data.get("prev_msg_id"):
            await message.bot.delete_message(message.chat.id, msg_id)
    except: 
        pass
    
    text = (
        f"üìù <b>{i18n.get('post.add.choose_method', '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞')}</b>\n\n"
        f"üéØ <b>{i18n.get('post.add.topic_label', '–¢–µ–º–∞')}:</b> {topic}\n\n"
        f"{i18n.get('post.add.method_prompt', '–ö–∞–∫ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç?')}"
    )
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=i18n.get("post.add.ai_generate", "ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI"),
                callback_data="post:add:ai:manual"
            )
        ],
        [
            InlineKeyboardButton(
                text=i18n.get("post.add.manual_input", "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É"),
                callback_data="post:add:manual:manual"
            )
        ],
        [
            InlineKeyboardButton(
                text=i18n.get("common.back", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"),
                callback_data="posts:back"
            )
        ]
    ])
    
    msg = await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    await state.update_data(
        topic=topic,
        prev_msg_id=msg.message_id
    )
    await state.set_state(AddPostStates.choosing_content_method)


async def process_content_method_ai(callback: CallbackQuery, state: FSMContext, session, user, i18n, **_):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    await callback.answer()
    
    data = await state.get_data()
    topic = data.get("topic")
    
    try:
        if msg_id := data.get("prev_msg_id"):
            await callback.bot.delete_message(callback.message.chat.id, msg_id)
    except: 
        pass
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    loading_msg = await callback.message.answer(
        f"ü§ñ {i18n.get('post.add.generating', '–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç...')}\n\n"
        f"‚è≥ {i18n.get('post.add.please_wait', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.')}"
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
        theme = data.get("theme", "–æ–±—â–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞")
        style = data.get("writing_style", "friendly")
        language = data.get("post_language", "ru")
        content_length = data.get("content_length", "medium")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from bot.services.crud.subscription import get_active_subscription
        active_subscription = await get_active_subscription(session, user.id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º (—Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π)
        is_premium = active_subscription is not None
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ AI —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        ai_service = OpenAIService()
        generated_content = await ai_service.generate_post_content(
            topic=topic,
            theme=theme,
            style=style,
            language=language,
            content_length=content_length,
            max_length=3000,
            is_premium=is_premium
        )
        
        await loading_msg.delete()
        
        if generated_content:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            model_name = i18n.get("post.add.ai_model_gpt4", "GPT-4") if is_premium else i18n.get("post.add.ai_model_gpt35", "GPT-3.5 Turbo")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            preview_text = (
                f"ü§ñ <b>{i18n.get('post.add.ai_generated', 'AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∫–æ–Ω—Ç–µ–Ω—Ç')}</b>\n\n"
                f"üß† <b>–ú–æ–¥–µ–ª—å:</b> {model_name}\n"
                f"üìÇ <b>{i18n.get('workflow.field.theme', '–¢–µ–º–∞—Ç–∏–∫–∞')}:</b> {theme}\n"
                f"‚ú® <b>{i18n.get('workflow.field.style', '–°—Ç–∏–ª—å')}:</b> {style}\n"
                f"üìè <b>{i18n.get('workflow.field.length', '–î–ª–∏–Ω–∞')}:</b> {content_length}\n"
                f"üéØ <b>{i18n.get('post.add.topic_label', '–¢–µ–º–∞')}:</b> {topic}\n\n"
                f"üìÑ <b>{i18n.get('post.add.generated_content', '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç')}:</b>\n\n{generated_content}"
            )
            
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=i18n.get("post.add.use_content", "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"),
                        callback_data="post:add:use_ai"
                    ),
                    InlineKeyboardButton(
                        text=i18n.get("post.add.regenerate", "üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å"),
                        callback_data="post:add:ai:manual"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=i18n.get("post.add.edit_content", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"),
                        callback_data="post:add:manual:manual"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=i18n.get("common.back", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"),
                        callback_data="posts:back"
                    )
                ]
            ])
            
            msg = await callback.message.answer(preview_text, reply_markup=keyboard, parse_mode="HTML")
            await state.update_data(
                generated_content=generated_content,
                prev_msg_id=msg.message_id
            )
            await state.set_state(AddPostStates.generating_ai_content)
        else:
            # –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É
            await callback.message.answer(
                i18n.get("post.add.ai_error", "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.")
            )
            await process_content_method_manual(callback, state, session, user, i18n)
            
    except Exception as e:
        try:
            await loading_msg.delete()
        except:
            pass
        await callback.message.answer(
            i18n.get("post.add.ai_error", "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.")
        )
        await process_content_method_manual(callback, state, session, user, i18n)


async def process_content_method_manual(callback: CallbackQuery, state: FSMContext, session, user, i18n, **_):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞"""
    await callback.answer()
    
    data = await state.get_data()
    topic = data.get("topic")
    
    try:
        if msg_id := data.get("prev_msg_id"):
            await callback.bot.delete_message(callback.message.chat.id, msg_id)
    except: 
        pass
    
    text = (
        f"üìù <b>{i18n.get('post.add.enter_content', '–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç')}</b>\n\n"
        f"üìÇ <b>{i18n.get('workflow.field.theme', '–¢–µ–º–∞—Ç–∏–∫–∞')}:</b> {data.get('theme', '–æ–±—â–∞—è')}\n"
        f"üéØ <b>{i18n.get('post.add.topic_label', '–¢–µ–º–∞')}:</b> {topic}\n\n"
        f"{i18n.get('post.add.content_prompt', '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:')}"
    )
    
    msg = await callback.message.answer(text, parse_mode="HTML")
    await state.update_data(prev_msg_id=msg.message_id)
    await state.set_state(AddPostStates.entering_content)


async def process_use_ai_content(callback: CallbackQuery, state: FSMContext, session, user, i18n, **_):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    await callback.answer()
    
    data = await state.get_data()
    generated_content = data.get("generated_content")
    
    if generated_content:
        # –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        await ask_publish_time(callback, state, i18n)
    else:
        await callback.message.answer(i18n.get("post.add.error", "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
        await state.clear()


async def create_post_from_content(content: str, callback_or_message, state: FSMContext, session, user, i18n, scheduled_time=None):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç –∏–∑ –≥–æ—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    data = await state.get_data()
    topic = data.get("topic")
    
    if scheduled_time is None:
        from datetime import datetime, timezone, timedelta
        scheduled_time = datetime.now(timezone.utc) + timedelta(hours=1)
    
    try:
        if hasattr(callback_or_message, 'message'):
            # –≠—Ç–æ callback
            try:
                if msg_id := data.get("prev_msg_id"):
                    await callback_or_message.bot.delete_message(callback_or_message.message.chat.id, msg_id)
            except: 
                pass
            message_handler = callback_or_message.message
        else:
            # –≠—Ç–æ message
            try:
                await callback_or_message.delete()
                if msg_id := data.get("prev_msg_id"):
                    await callback_or_message.bot.delete_message(callback_or_message.chat.id, msg_id)
            except: 
                pass
            message_handler = callback_or_message
        
        # –í—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —á–µ—Ä–µ–∑ —á–∞—Å
        # scheduled_time = datetime.now(timezone.utc) + timedelta(hours=1) # This line is now handled by the function call
        
        post = await create_post(
            session,
            user_workflow_id=None,  # –ü–æ—Å—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç workflow
            social_account_id=data.get("social_account_id"),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            topic=topic,
            content=content,
            media_type=data.get("post_media_type", "text"),
            status="pending",
            scheduled_time=scheduled_time,
            moderated=False
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if post:
            data = await state.get_data()
            is_free_post = data.get("is_free_post", False)
            
            if is_free_post:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
                from bot.services.crud.user import increment_free_posts_used, get_free_posts_remaining
                await increment_free_posts_used(session, user.id)
                remaining = await get_free_posts_remaining(session, user.id)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –ø–æ—Å—Ç–µ
                preview_text = (
                    f"‚úÖ <b>{i18n.get('post.add.free_post_created', '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ—Å—Ç —Å–æ–∑–¥–∞–Ω! –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {remaining}').format(remaining=remaining)}</b>\n\n"
                    f"üìÇ <b>{i18n.get('workflow.field.theme', '–¢–µ–º–∞—Ç–∏–∫–∞')}:</b> {data.get('theme', '–æ–±—â–∞—è')}\n"
                    f"‚ú® <b>{i18n.get('workflow.field.style', '–°—Ç–∏–ª—å')}:</b> {data.get('writing_style', '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π')}\n"
                    f"üéØ <b>{i18n.get('post.add.topic_label', '–¢–µ–º–∞')}:</b> {topic}\n"
                    f"üìÖ <b>{i18n.get('post.add.scheduled_label', '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ')}:</b> {scheduled_time.strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"üìÑ <b>{i18n.get('post.add.content_label', '–ö–æ–Ω—Ç–µ–Ω—Ç')}:</b>\n{content[:300]}"
                )
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
                from bot.services.crud.usage_stats import get_user_usage_stats, update_user_usage_stats
                usage_stats = await get_user_usage_stats(session, user.id)
                if usage_stats:
                    usage_stats.posts_used += 1
                    await session.commit()
                
                # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞
                preview_text = (
                    f"‚úÖ <b>{i18n.get('post.add.created', '–ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω!')}</b>\n\n"
                    f"üìÇ <b>{i18n.get('workflow.field.theme', '–¢–µ–º–∞—Ç–∏–∫–∞')}:</b> {data.get('theme', '–æ–±—â–∞—è')}\n"
                    f"‚ú® <b>{i18n.get('workflow.field.style', '–°—Ç–∏–ª—å')}:</b> {data.get('writing_style', '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π')}\n"
                    f"üéØ <b>{i18n.get('post.add.topic_label', '–¢–µ–º–∞')}:</b> {topic}\n"
                    f"üìÖ <b>{i18n.get('post.add.scheduled_label', '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ')}:</b> {scheduled_time.strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"üìÑ <b>{i18n.get('post.add.content_label', '–ö–æ–Ω—Ç–µ–Ω—Ç')}:</b>\n{content[:300]}"
                )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
        
        if len(content) > 300:
            preview_text += "..."
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=i18n.get("post.view_all", "üìã –í—Å–µ –ø–æ—Å—Ç—ã"),
                    callback_data="posts:back"
                ),
                InlineKeyboardButton(
                    text=i18n.get("post.add.create_another", "‚ûï –ï—â–µ –ø–æ—Å—Ç"),
                    callback_data="post:add"
                )
            ]
        ])
        
        await message_handler.answer(preview_text, reply_markup=keyboard, parse_mode="HTML")
        await state.clear()
        
    except Exception as e:
        await message_handler.answer(
            i18n.get("post.add.error", "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        )
        await state.clear()


async def process_content(message: Message, state: FSMContext, session, user, i18n, **_):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    content = message.text.strip()
    
    if len(content) < 10:
        await message.answer(i18n.get("post.add.content_too_short", "‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π."))
        return
    
    if len(content) > 4000:
        await message.answer(i18n.get("post.add.content_too_long", "‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤."))
        return
    
    data = await state.get_data()
    try:
        await message.delete()
        if msg_id := data.get("prev_msg_id"):
            await message.bot.delete_message(message.chat.id, msg_id)
    except: 
        pass
    
    await state.update_data(generated_content=content)
    # –ü–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    await ask_publish_time(message, state, i18n)

async def ask_publish_time(callback_or_message, state: FSMContext, i18n):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    text = i18n.get("post.add.choose_publish_time", "‚è∞ –ö–æ–≥–¥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç?")
    if hasattr(callback_or_message, 'message'):
        msg = await callback_or_message.message.answer(text, reply_markup=get_time_selection_keyboard())
    else:
        msg = await callback_or_message.answer(text, reply_markup=get_time_selection_keyboard())
    await state.set_state(AddPostStates.choosing_publish_time)
    await state.update_data(prev_msg_id=msg.message_id)

async def process_publish_time(callback: CallbackQuery, state: FSMContext, session, user, i18n, **_):
    await callback.answer()
    time_data = callback.data.split(":", 1)[-1]
    data = await state.get_data()
    try:
        if msg_id := data.get("prev_msg_id"):
            await callback.bot.delete_message(callback.message.chat.id, msg_id)
    except:
        pass
    if time_data == "now":
        from datetime import datetime, timezone
        scheduled_time = datetime.now(timezone.utc)
    else:
        from datetime import datetime, timezone
        today = datetime.now(timezone.utc)
        hour, minute = map(int, time_data.split(":"))
        scheduled_time = today.replace(hour=hour, minute=minute, second=0, microsecond=0)
        if scheduled_time < today:
            scheduled_time = scheduled_time.replace(day=today.day + 1)
    await create_post_from_content(
        data.get("generated_content"), callback, state, session, user, i18n, scheduled_time=scheduled_time
    )


def register_add_post_handlers(router: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤"""
    router.callback_query.register(add_post_start, F.data == "post:add")
    router.callback_query.register(process_account_selection, F.data.startswith("workflow:account:"))
    router.callback_query.register(process_creation_method_selection, F.data.startswith("post:add:"))
    router.callback_query.register(process_theme_selection, F.data.startswith("theme:"))
    router.callback_query.register(process_style_selection, F.data.startswith("style:"))
    router.callback_query.register(process_content_length_selection, F.data.startswith("length:"))
    router.callback_query.register(process_media_type_selection, F.data.startswith("media:"))
    router.callback_query.register(process_language_selection, F.data.startswith("lang:"))
    router.callback_query.register(process_content_method_ai, F.data.startswith("post:add:ai:"))
    router.callback_query.register(process_content_method_manual, F.data.startswith("post:add:manual:"))
    router.callback_query.register(process_use_ai_content, F.data == "post:add:use_ai")
    router.callback_query.register(process_publish_time, F.data.startswith("time:"))
    router.message.register(process_topic, AddPostStates.entering_topic)
    router.message.register(process_content, AddPostStates.entering_content)
    router.message.register(process_custom_theme, AddPostStates.entering_custom_theme) 