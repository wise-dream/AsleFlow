from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime, timezone
from sqlalchemy.future import select

from bot.services.crud.post import update_post, get_post_by_id
from bot.models.models import UserWorkflow
from bot.keyboards.inline.workflows import get_time_selection_keyboard

router = Router()

class EditPostStates(StatesGroup):
    editing_topic = State()
    editing_content = State()
    editing_schedule = State()


async def edit_topic_handler(callback: CallbackQuery, session, i18n, user, state: FSMContext, **_):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º—ã –ø–æ—Å—Ç–∞"""
    await callback.answer()
    post_id = int(callback.data.split(":")[-1])
    
    post = await get_post_by_id(session, post_id)
    if not post or post.status == "published":
        await callback.message.answer(i18n.get("post.not_found", "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."))
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å
    workflow_result = await session.execute(
        select(UserWorkflow).where(UserWorkflow.id == post.user_workflow_id)
    )
    workflow = workflow_result.scalar_one_or_none()
    
    if not workflow or workflow.user_id != user.id:
        await callback.message.answer(i18n.get("post.access_denied", "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω."))
        return

    await callback.message.delete()
    
    text = (
        f"‚úèÔ∏è <b>{i18n.get('post.edit.topic', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã')}</b>\n\n"
        f"üìù <b>{i18n.get('post.edit.current_topic', '–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞')}:</b> {post.topic}\n\n"
        f"{i18n.get('post.edit.enter_new_topic', '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É –ø–æ—Å—Ç–∞:')}"
    )
    
    msg = await callback.message.answer(text, parse_mode="HTML")
    await state.set_state(EditPostStates.editing_topic)
    await state.update_data(post_id=post_id, prev_msg_id=msg.message_id)


async def edit_content_handler(callback: CallbackQuery, session, i18n, user, state: FSMContext, **_):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å—Ç–∞"""
    await callback.answer()
    post_id = int(callback.data.split(":")[-1])
    
    post = await get_post_by_id(session, post_id)
    if not post or post.status == "published":
        await callback.message.answer(i18n.get("post.not_found", "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."))
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å
    workflow_result = await session.execute(
        select(UserWorkflow).where(UserWorkflow.id == post.user_workflow_id)
    )
    workflow = workflow_result.scalar_one_or_none()
    
    if not workflow or workflow.user_id != user.id:
        await callback.message.answer(i18n.get("post.access_denied", "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω."))
        return

    await callback.message.delete()
    
    text = (
        f"üìù <b>{i18n.get('post.edit.content', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞')}</b>\n\n"
        f"üìÑ <b>{i18n.get('post.edit.current_content', '–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç')}:</b>\n{post.content[:200]}...\n\n"
        f"{i18n.get('post.edit.enter_new_content', '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞:')}"
    )
    
    msg = await callback.message.answer(text, parse_mode="HTML")
    await state.set_state(EditPostStates.editing_content)
    await state.update_data(post_id=post_id, prev_msg_id=msg.message_id)


async def edit_schedule_handler(callback: CallbackQuery, session, i18n, user, state: FSMContext, **_):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    await callback.answer()
    post_id = int(callback.data.split(":")[-1])
    
    post = await get_post_by_id(session, post_id)
    if not post or post.status == "published":
        await callback.message.answer(i18n.get("post.not_found", "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."))
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å
    workflow_result = await session.execute(
        select(UserWorkflow).where(UserWorkflow.id == post.user_workflow_id)
    )
    workflow = workflow_result.scalar_one_or_none()
    
    if not workflow or workflow.user_id != user.id:
        await callback.message.answer(i18n.get("post.access_denied", "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω."))
        return

    await callback.message.delete()
    
    current_time = post.scheduled_time.strftime("%d.%m.%Y %H:%M") if post.scheduled_time else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    text = (
        f"‚è∞ <b>{i18n.get('post.edit.schedule', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏')}</b>\n\n"
        f"üìÖ <b>{i18n.get('post.edit.current_time', '–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è')}:</b> {current_time}\n\n"
        f"{i18n.get('post.edit.choose_new_time', '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:')}"
    )
    
    msg = await callback.message.answer(text, reply_markup=get_time_selection_keyboard(), parse_mode="HTML")
    await state.set_state(EditPostStates.editing_schedule)
    await state.update_data(post_id=post_id, prev_msg_id=msg.message_id)


async def process_topic_edit(message: Message, state: FSMContext, session, i18n, **_):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–º—ã"""
    topic = message.text.strip()
    
    if len(topic) < 5:
        await message.answer(i18n.get("post.add.topic_too_short", "‚ö†Ô∏è –¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤."))
        return
    
    if len(topic) > 200:
        await message.answer(i18n.get("post.add.topic_too_long", "‚ö†Ô∏è –¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤."))
        return
    
    data = await state.get_data()
    post_id = data.get("post_id")
    
    try:
        await message.delete()
        if msg_id := data.get("prev_msg_id"):
            await message.bot.delete_message(message.chat.id, msg_id)
    except: 
        pass
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É
    success = await update_post(session, post_id, topic=topic)
    
    if success:
        text = f"‚úÖ {i18n.get('post.edit.topic_updated', '–¢–µ–º–∞ –ø–æ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!')}"
    else:
        text = f"‚ùå {i18n.get('post.edit.topic_error', '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã.')}"
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=i18n.get("post.view_all", "üìã –ö –ø–æ—Å—Ç—É"),
                callback_data=f"post:view:{post_id}"
            )
        ]
    ])
    
    await message.answer(text, reply_markup=keyboard)
    await state.clear()


async def process_content_edit(message: Message, state: FSMContext, session, i18n, **_):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    content = message.text.strip()
    
    if len(content) < 10:
        await message.answer(i18n.get("post.add.content_too_short", "‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π."))
        return
    
    if len(content) > 4000:
        await message.answer(i18n.get("post.add.content_too_long", "‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤."))
        return
    
    data = await state.get_data()
    post_id = data.get("post_id")
    
    try:
        await message.delete()
        if msg_id := data.get("prev_msg_id"):
            await message.bot.delete_message(message.chat.id, msg_id)
    except: 
        pass
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    success = await update_post(session, post_id, content=content)
    
    if success:
        text = f"‚úÖ {i18n.get('post.edit.content_updated', '–ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!')}"
    else:
        text = f"‚ùå {i18n.get('post.edit.content_error', '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞.')}"
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=i18n.get("post.view_all", "üìã –ö –ø–æ—Å—Ç—É"),
                callback_data=f"post:view:{post_id}"
            )
        ]
    ])
    
    await message.answer(text, reply_markup=keyboard)
    await state.clear()


async def process_schedule_edit(callback: CallbackQuery, state: FSMContext, session, i18n, **_):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    await callback.answer()
    time_data = callback.data.split(":", 1)[-1]
    
    data = await state.get_data()
    post_id = data.get("post_id")
    
    try:
        if msg_id := data.get("prev_msg_id"):
            await callback.bot.delete_message(callback.message.chat.id, msg_id)
    except:
        pass
    
    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
    if time_data == "now":
        scheduled_time = datetime.now(timezone.utc)
    else:
        today = datetime.now(timezone.utc)
        hour, minute = map(int, time_data.split(":"))
        scheduled_time = today.replace(hour=hour, minute=minute, second=0, microsecond=0)
        if scheduled_time < today:
            scheduled_time = scheduled_time.replace(day=today.day + 1)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
    success = await update_post(session, post_id, scheduled_time=scheduled_time)
    
    if success:
        time_str = scheduled_time.strftime("%d.%m.%Y %H:%M")
        text = f"‚úÖ {i18n.get('post.edit.schedule_updated', '–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!')} {time_str}"
    else:
        text = f"‚ùå {i18n.get('post.edit.schedule_error', '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.')}"
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=i18n.get("post.view_all", "üìã –ö –ø–æ—Å—Ç—É"),
                callback_data=f"post:view:{post_id}"
            )
        ]
    ])
    
    await callback.message.answer(text, reply_markup=keyboard)
    await state.clear()


def register_edit_post_handlers(router: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤"""
    router.callback_query.register(edit_topic_handler, F.data.startswith("post:edit:topic:"))
    router.callback_query.register(edit_content_handler, F.data.startswith("post:edit:content:"))
    router.callback_query.register(edit_schedule_handler, F.data.startswith("post:edit:schedule:"))
    router.callback_query.register(process_schedule_edit, F.data.startswith("time:"))
    router.message.register(process_topic_edit, EditPostStates.editing_topic)
    router.message.register(process_content_edit, EditPostStates.editing_content) 