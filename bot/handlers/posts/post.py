from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram import F, Router
from sqlalchemy.future import select

from bot.keyboards.inline.posts import get_posts_keyboard, get_post_actions_keyboard, get_post_filter_keyboard
from bot.services.crud.post import (
    get_post_by_id, 
    get_posts_by_status, 
    delete_post as crud_delete_post,
    update_post as crud_update_post
)
from bot.services.publishing import PublishingService
from bot.models.models import Post, UserWorkflow

router = Router()


async def get_posts_by_user_id(session, user_id: int, status_filter: str = None) -> list[Post]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
    query = select(Post).join(UserWorkflow).where(UserWorkflow.user_id == user_id)
    
    if status_filter and status_filter != "all":
        query = query.where(Post.status == status_filter)
    
    query = query.order_by(Post.created_at.desc())
    result = await session.execute(query)
    return result.scalars().all()


def format_posts_stats_text(stats, i18n):
    text = []
    if stats.get('pending'):
        text.append(i18n.get("post.stats.pending", "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ: {count}").format(count=stats['pending']))
    if stats.get('scheduled'):
        text.append(i18n.get("post.stats.scheduled", "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã: {count}").format(count=stats['scheduled']))
    if stats.get('published'):
        text.append(i18n.get("post.stats.published", "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã: {count}").format(count=stats['published']))
    if stats.get('failed'):
        text.append(i18n.get("post.stats.failed", "‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ: {count}").format(count=stats['failed']))
    return "\n".join(text)


async def posts_handler(message: Message, session, i18n, user, **_):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å—Ç–æ–≤"""
    posts = await get_posts_by_user_id(session, user.id)

    if not posts:
        await message.answer(
            i18n.get("posts.none", "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤."),
            reply_markup=get_posts_keyboard(i18n, [])
        )
        return

    text = format_posts_stats_text(posts, i18n)

    await message.answer(
        text,
        reply_markup=get_posts_keyboard(i18n, posts[:10]),  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        parse_mode="HTML"
    )


async def posts_back_handler(callback: CallbackQuery, session, i18n, user, **_):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–æ–≤"""
    await callback.answer()
    posts = await get_posts_by_user_id(session, user.id)

    if not posts:
        await callback.message.edit_text(
            i18n.get("posts.none", "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤."),
            reply_markup=get_posts_keyboard(i18n, [])
        )
        return

    text = format_posts_stats_text(posts, i18n)

    await callback.message.edit_text(
        text,
        reply_markup=get_posts_keyboard(i18n, posts[:10]),
        parse_mode="HTML"
    )


async def view_post_handler(callback: CallbackQuery, session, user, i18n, **_):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    await callback.answer()
    post_id = int(callback.data.split(":")[-1])
    
    post = await get_post_by_id(session, post_id)
    if not post:
        await callback.message.answer(i18n.get("post.not_found", "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."))
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    workflow_result = await session.execute(
        select(UserWorkflow).where(UserWorkflow.id == post.user_workflow_id)
    )
    workflow = workflow_result.scalar_one_or_none()
    
    if not workflow or workflow.user_id != user.id:
        await callback.message.answer(i18n.get("post.access_denied", "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω."))
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
    status_text = i18n.get(f"post.status.{post.status}", post.status)
    status_text = status_text.upper()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    from datetime import datetime
    scheduled_time = post.scheduled_time.strftime("%d.%m.%Y %H:%M") if post.scheduled_time else i18n.get("post.time.not_set", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    published_time = post.published_time.strftime("%d.%m.%Y %H:%M") if post.published_time else i18n.get("post.time.not_published", "‚Äî")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏—é
    moderation_text = i18n.get("post.moderation.yes", "‚úÖ –î–∞") if post.moderated else i18n.get("post.moderation.no", "‚ùå –ù–µ—Ç")

    # –Ø–∑—ã–∫
    lang_code = (user.language or 'ru').upper()
    flag = {
        "RU": "üá∑üá∫",
        "EN": "üá¨üáß",
        "UA": "üá∫üá¶",
        "ES": "üá™üá∏",
        "DE": "üá©üá™",
        "FR": "üá´üá∑"
    }.get(lang_code, "üè≥Ô∏è")
    lang_text = f"{flag} {lang_code}"

    text = (
        f"üìù <b>{post.topic}</b>\n\n"
        f"<b>{i18n.get('post.field.status', 'üìä –°—Ç–∞—Ç—É—Å')}:</b> {status_text}\n"
        f"<b>{i18n.get('post.field.scheduled_time', 'üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ')}:</b> {scheduled_time}\n"
        f"<b>{i18n.get('post.field.published_time', '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ')}:</b> {published_time}\n"
        f"<b>{i18n.get('post.field.moderation', 'üîß –ú–æ–¥–µ—Ä–∞—Ü–∏—è')}:</b> {moderation_text}\n\n"
        f"<b>{i18n.get('post.field.content', 'üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç')}:</b>\n{post.content[:500]}"
        f"<b>{i18n.get('workflow.field.language', 'üåê –Ø–∑—ã–∫')}:</b> {lang_text}\n"
    )
    
    if len(post.content) > 500:
        text += "..."

    await callback.message.edit_text(
        text,
        reply_markup=get_post_actions_keyboard(post.id, i18n, post.status),
        parse_mode="HTML"
    )


async def delete_post_handler(callback: CallbackQuery, session, i18n, user, **_):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    await callback.answer()
    post_id = int(callback.data.split(":")[-1])
    
    post = await get_post_by_id(session, post_id)
    if not post:
        await callback.message.answer(i18n.get("post.not_found", "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."))
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    workflow_result = await session.execute(
        select(UserWorkflow).where(UserWorkflow.id == post.user_workflow_id)
    )
    workflow = workflow_result.scalar_one_or_none()
    
    if not workflow or workflow.user_id != user.id:
        await callback.message.answer(i18n.get("post.access_denied", "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω."))
        return

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç
    success = await crud_delete_post(session, post_id)
    if success:
        await callback.message.edit_text(i18n.get("post.deleted", "‚úÖ –ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω."))
    else:
        await callback.message.answer(i18n.get("post.delete_error", "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞."))


async def publish_post_handler(callback: CallbackQuery, session, i18n, user, **_):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞"""
    await callback.answer()
    post_id = int(callback.data.split(":")[-1])
    
    post = await get_post_by_id(session, post_id)
    if not post:
        await callback.message.answer(i18n.get("post.not_found", "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."))
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    workflow_result = await session.execute(
        select(UserWorkflow).where(UserWorkflow.id == post.user_workflow_id)
    )
    workflow = workflow_result.scalar_one_or_none()
    
    if not workflow or workflow.user_id != user.id:
        await callback.message.answer(i18n.get("post.access_denied", "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω."))
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    publishing_service = PublishingService(callback.bot)
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ—Å—Ç –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    scheduled = await publishing_service.schedule_post_for_publishing(session, post_id)
    
    if scheduled:
        # –°—Ä–∞–∑—É –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
        published = await publishing_service.publish_post(session, post_id)
        
        if published:
            await callback.message.edit_text(
                i18n.get("post.published_successfully", "‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!"),
                reply_markup=get_post_actions_keyboard(post_id, i18n, "published")
            )
        else:
            await callback.message.edit_text(
                i18n.get("post.scheduled", "‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."),
                reply_markup=get_post_actions_keyboard(post_id, i18n, "scheduled")
            )
    else:
        await callback.message.answer(i18n.get("post.publish_error", "‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞."))


async def edit_post_handler(callback: CallbackQuery, session, i18n, user, **_):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –Ω–µ–≤—ã–ª–æ–∂–µ–Ω–Ω—ã—Ö)"""
    await callback.answer()
    post_id = int(callback.data.split(":")[-1])
    
    post = await get_post_by_id(session, post_id)
    if not post:
        await callback.message.answer(i18n.get("post.not_found", "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."))
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    workflow_result = await session.execute(
        select(UserWorkflow).where(UserWorkflow.id == post.user_workflow_id)
    )
    workflow = workflow_result.scalar_one_or_none()
    
    if not workflow or workflow.user_id != user.id:
        await callback.message.answer(i18n.get("post.access_denied", "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω."))
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Å—Ç –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    if post.status == "published":
        await callback.message.answer(i18n.get("post.edit.published_error", "‚ùå –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å."))
        return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
    from aiogram.fsm.context import FSMContext
    from .edit import EditPostStates
    
    await callback.message.delete()
    
    text = (
        f"‚úèÔ∏è <b>{i18n.get('post.edit.title', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞')}</b>\n\n"
        f"üéØ <b>{i18n.get('post.add.topic_label', '–¢–µ–º–∞')}:</b> {post.topic}\n"
        f"üìÑ <b>{i18n.get('post.add.content_label', '–ö–æ–Ω—Ç–µ–Ω—Ç')}:</b> {post.content[:100]}...\n\n"
        f"{i18n.get('post.edit.choose_field', '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:')}"
    )
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=i18n.get("post.edit.topic", "‚úèÔ∏è –¢–µ–º—É"),
                callback_data=f"post:edit:topic:{post_id}"
            ),
            InlineKeyboardButton(
                text=i18n.get("post.edit.content", "üìù –ö–æ–Ω—Ç–µ–Ω—Ç"),
                callback_data=f"post:edit:content:{post_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text=i18n.get("post.edit.schedule", "‚è∞ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"),
                callback_data=f"post:edit:schedule:{post_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text=i18n.get("common.back", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"),
                callback_data=f"post:view:{post_id}"
            )
        ]
    ])
    
    await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")


def register_posts_handler(router: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ—Å—Ç–æ–≤"""
    router.message.register(posts_handler, Command("posts"))
    router.message.register(posts_handler, F.text.lower().contains("posts"))
    router.message.register(posts_handler, F.text.lower().contains("–ø–æ—Å—Ç"))
    
    router.callback_query.register(posts_back_handler, F.data == "posts:back")
    router.callback_query.register(view_post_handler, F.data.startswith("post:view:"))
    router.callback_query.register(delete_post_handler, F.data.startswith("post:delete:"))
    router.callback_query.register(publish_post_handler, F.data.startswith("post:publish:"))
    router.callback_query.register(edit_post_handler, F.data.startswith("post:edit:")) 