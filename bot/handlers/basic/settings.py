from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from bot.models.models import User
from bot.keyboards.inline.settings import get_settings_keyboard

from bot.services.crud.user import update_user_with_cache_clear, get_user_by_telegram_id
from bot.middlewares.i18n import I18nMiddleware

router = Router()


class SettingsStates(StatesGroup):
    waiting_for_email = State()
    waiting_for_referrer_code = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞


async def settings_handler(message: Message, session, i18n, user, **_):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await message.answer(
        i18n.get("settings.title", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        reply_markup=get_settings_keyboard(i18n)
    )


async def settings_callback_handler(callback: CallbackQuery, session, i18n, user, **_):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    data = callback.data
    
    if data == "settings:language":
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        await language_selection_handler(callback, session, i18n, user)
        
    elif data == "settings:edit_name":
        await callback.answer(i18n.get("settings.edit_name_info", "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"))
        
    elif data == "settings:email":
        await handle_email_settings(callback, session, i18n, user)
        
    elif data == "settings:referral":
        await handle_referral_settings(callback, session, i18n, user)
        
    elif data == "settings:back":
        await back_to_settings_handler(callback, session, i18n, user)
        
    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")


async def handle_email_settings(callback: CallbackQuery, session, i18n, user, **_):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ email"""
    current_email = user.email or i18n.get("settings.no_email", "–ù–µ —É–∫–∞–∑–∞–Ω")
    
    if user.email:
        # –ï—Å–ª–∏ email —É–∂–µ –µ—Å—Ç—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–∑–º–µ–Ω–∏—Ç—å
        text = (
            f"üìß <b>–¢–µ–∫—É—â–∏–π email:</b> {user.email}\n\n"
            f"{i18n.get('settings.email_change_prompt', '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π email –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞')}"
        )
    else:
        # –ï—Å–ª–∏ email –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å
        text = (
            f"üìß <b>Email:</b> {i18n.get('settings.no_email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            f"{i18n.get('settings.email_add_prompt', '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à email')}"
        )
    
    from bot.keyboards.inline.settings import get_email_keyboard
    await callback.message.edit_text(
        text,
        reply_markup=get_email_keyboard(i18n),
        parse_mode="HTML"
    )


async def email_enter_handler(callback: CallbackQuery, state: FSMContext, i18n, **_):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–≤–æ–¥–∞ email"""
    await callback.answer()
    await callback.message.edit_text(
        i18n.get("settings.email_add_prompt", "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à email:"),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîô " + i18n.get("back", "–ù–∞–∑–∞–¥"), 
                callback_data="settings:back"
            )]
        ])
    )
    await state.set_state(SettingsStates.waiting_for_email)


async def handle_referral_settings(callback: CallbackQuery, session, i18n, user, **_):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞"""
    current_code = user.referral_code or i18n.get("settings.no_referral_code", "–ù–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
    
    if user.referral_code:
        # –ï—Å–ª–∏ –∫–æ–¥ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        text = (
            f"üé´ <b>–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:</b> <code>{user.referral_code}</code>\n\n"
            f"{i18n.get('settings.referral_info', '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π')}"
        )
    else:
        # –ï—Å–ª–∏ –∫–æ–¥–∞ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        text = (
            f"üé´ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:</b> {i18n.get('settings.no_referral_code', '–ù–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω')}\n\n"
            f"{i18n.get('settings.referral_error_info', '–û—à–∏–±–∫–∞: —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')}"
        )
    
    from bot.keyboards.inline.settings import get_referral_keyboard
    await callback.message.edit_text(
        text,
        reply_markup=get_referral_keyboard(i18n, user.referral_code),
        parse_mode="HTML"
    )





async def referral_code_input_handler(message: Message, state: FSMContext, session, i18n, user, **_):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
    
    code = message.text.strip().upper()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞
    from bot.utils.referral import validate_referral_code, get_user_by_referral_code
    if not validate_referral_code(code):
        await message.answer(
            i18n.get('referral.invalid_format',
                     '‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞!</b>\n\n'
                     '–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 8 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã.\n'
                     '–ü—Ä–∏–º–µ—Ä: <code>ABC12345</code>\n\n'
                     '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"'),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=i18n.get("common.cancel", "–û—Ç–º–µ–Ω–∞"), 
                    callback_data="cancel_referral_input"
                )]
            ])
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–æ–¥
    if code == user.referral_code:
        await message.answer(
            i18n.get('referral.self_referral',
                     '‚ùå <b>–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–æ–¥!</b>\n\n'
                     '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"'),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=i18n.get("common.cancel", "–û—Ç–º–µ–Ω–∞"), 
                    callback_data="cancel_referral_input"
                )]
            ])
        )
        return
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º
    referrer = await get_user_by_referral_code(session, code)
    if not referrer:
        await message.answer(
            i18n.get('referral.code_not_found',
                     '‚ùå <b>–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n'
                     '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n'
                     '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"'),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=i18n.get("common.cancel", "–û—Ç–º–µ–Ω–∞"), 
                    callback_data="cancel_referral_input"
                )]
            ])
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–∞–º —Å–µ–±—è
    if referrer.id == user.id:
        await message.answer(
            i18n.get('referral.self_referral',
                     '‚ùå <b>–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–æ–¥!</b>\n\n'
                     '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"'),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=i18n.get("common.cancel", "–û—Ç–º–µ–Ω–∞"), 
                    callback_data="cancel_referral_input"
                )]
            ])
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Ç–æ–≥–æ, –∫—Ç–æ –µ–≥–æ —É–∂–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª
    if hasattr(referrer, 'referred_by_id') and referrer.referred_by_id == user.id:
        await message.answer(
            i18n.get('referral.circular_referral',
                     '‚ùå <b>–¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å!</b>\n\n'
                     '–ù–µ–ª—å–∑—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª.\n'
                     '–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"'),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=i18n.get("common.cancel", "–û—Ç–º–µ–Ω–∞"), 
                    callback_data="cancel_referral_input"
                )]
            ])
        )
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
    try:
        from bot.services.crud.user import update_user_with_cache_clear
        updated_user = await update_user_with_cache_clear(
            session, user.id, referred_by_id=referrer.id
        )
        
        if updated_user:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await message.answer(
                i18n.get('referral.success',
                         f'‚úÖ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n'
                         f'–í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: <b>{referrer.name}</b>\n'
                         f'–ï–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: <code>{referrer.referral_code}</code>\n\n'
                         f'–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è!'),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text=i18n.get("common.back_to_settings", "–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"), 
                        callback_data="settings:back"
                    )]
                ])
            )
            
        else:
            await message.answer(
                i18n.get('referral.update_error',
                         '‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!</b>\n\n'
                         '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å.\n'
                         '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.'),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text=i18n.get("common.cancel", "–û—Ç–º–µ–Ω–∞"), 
                        callback_data="cancel_referral_input"
                    )]
                ])
            )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–≤—è–∑–∏: {e}")
        await message.answer(
            i18n.get('referral.system_error',
                     '‚ùå <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞!</b>\n\n'
                     '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–≤—è–∑–∏.\n'
                     '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.'),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=i18n.get("common.cancel", "–û—Ç–º–µ–Ω–∞"), 
                    callback_data="cancel_referral_input"
                )]
            ])
        )


async def email_input_handler(message: Message, state: FSMContext, session, i18n, user, redis=None, **_):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ email"""
    email = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
    if '@' not in email or '.' not in email:
        await message.answer(i18n.get("settings.email_invalid", "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email"))
        return
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—á–∏—â–∞–µ–º –∫—ç—à
        updated_user = await update_user_with_cache_clear(session, user.id, email=email)
        
        if updated_user:
            await message.answer(
                f"‚úÖ {i18n.get('settings.email_updated', 'Email –æ–±–Ω–æ–≤–ª–µ–Ω')}: {email}",
                reply_markup=get_settings_keyboard(i18n)
            )
        else:
            await message.answer(i18n.get("settings.email_update_error", "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è email"))
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è email: {e}")
        await message.answer(i18n.get("settings.email_error", "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"))


async def referral_copy_handler(callback: CallbackQuery, i18n, **_):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞"""
    data = callback.data
    if data.startswith("referral:copy:"):
        code = data.split(":")[2]
        await callback.answer(f"üìã {i18n.get('referral.copy', '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ')}: {code}")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")





async def language_selection_handler(callback: CallbackQuery, session, i18n, user, **_):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    from bot.keyboards.inline.settings import get_language_keyboard
    await callback.message.edit_text(
        i18n.get("language.choose", "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:"),
        reply_markup=get_language_keyboard(i18n)
    )


async def language_set_handler(callback: CallbackQuery, session, i18n, user, redis=None, **_):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞"""
    data = callback.data
    if data.startswith("language:set:"):
        lang = data.split(":")[2]
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—á–∏—â–∞–µ–º –∫—ç—à
            updated_user = await update_user_with_cache_clear(session, user.id, redis, language=lang)
            
            if updated_user:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
                from bot.middlewares.i18n import I18nMiddleware
                new_translations = I18nMiddleware().translations.get(lang, {})
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–º —è–∑—ã–∫–µ
                welcome_text = new_translations.get("welcome", "–ü—Ä–∏–≤–µ—Ç, {name}!").format(name=user.name or callback.from_user.full_name)
                alert_text = new_translations.get("language_set", "‚úÖ –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
                
                # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                try:
                    await callback.message.delete()
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
                from bot.keyboards.reply.main_menu import get_main_menu
                reply_markup = get_main_menu(new_translations)
                await callback.message.answer(welcome_text, reply_markup=reply_markup)
                
                await callback.answer(alert_text, show_alert=True)
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞")


async def referral_input_handler(callback: CallbackQuery, state: FSMContext, session, i18n, user, **_):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–≤–æ–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ—Ñ–µ—Ä–∞–ª
    if user.referred_by_id:
        await callback.answer(i18n.get('referral.already_has_referrer', '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª!'), show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    if not user.referral_code:
        await callback.answer(i18n.get('referral.no_code_error', '–û—à–∏–±–∫–∞: —É –≤–∞—Å –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞!'), show_alert=True)
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    await callback.message.edit_text(
        i18n.get('referral.input_prompt', 
                 'üé´ <b>–í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ</b>\n\n'
                 '–ï—Å–ª–∏ –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª –¥—Ä—É–≥, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ —É –Ω–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.\n'
                 '–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 8 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã.\n\n'
                 '–ü—Ä–∏–º–µ—Ä: <code>ABC12345</code>\n\n'
                 '–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:'),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=i18n.get("common.cancel", "–û—Ç–º–µ–Ω–∞"), 
                callback_data="cancel_referral_input"
            )]
        ])
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
    await state.set_state(SettingsStates.waiting_for_referrer_code)
    await callback.answer()


async def cancel_referral_input_handler(callback: CallbackQuery, state: FSMContext, session, i18n, user, **_):
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤–≤–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞"""
    
    await state.clear()
    
    await callback.message.edit_text(
        i18n.get('referral.cancelled',
                 '‚ùå <b>–í–≤–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n'
                 '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.'),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=i18n.get("common.back_to_settings", "–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"), 
                callback_data="settings:back"
            )]
        ])
    )
    
    await callback.answer()


async def back_to_settings_handler(callback: CallbackQuery, session, i18n, user, **_):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    from bot.keyboards.inline.settings import get_settings_keyboard
    await callback.message.edit_text(
        i18n.get("settings.title", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        reply_markup=get_settings_keyboard(i18n)
    )





def register_settings_handler(router: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    router.message.register(settings_handler, Command("settings"))
    router.message.register(settings_handler, F.text.lower().contains("–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"))
    router.message.register(settings_handler, F.text.lower().contains("settings"))
    router.callback_query.register(settings_callback_handler, lambda c: c.data.startswith("settings:"))
    router.callback_query.register(email_enter_handler, lambda c: c.data == "email:enter")
    
    # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    router.callback_query.register(referral_copy_handler, lambda c: c.data.startswith("referral:copy:"))
    router.callback_query.register(language_selection_handler, lambda c: c.data == "settings:language")
    router.callback_query.register(language_set_handler, lambda c: c.data.startswith("language:set:"))
    router.callback_query.register(referral_input_handler, lambda c: c.data == "referral:input")
    router.callback_query.register(cancel_referral_input_handler, lambda c: c.data == "cancel_referral_input")
    router.callback_query.register(back_to_settings_handler, lambda c: c.data == "settings:back")
    

    
    # FSM —Ö–µ–Ω–¥–ª–µ—Ä—ã
    router.message.register(email_input_handler, SettingsStates.waiting_for_email)
    router.message.register(referral_code_input_handler, SettingsStates.waiting_for_referrer_code)


__all__ = ["register_settings_handler"]
