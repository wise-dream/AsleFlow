from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from bot.services.crud.user import get_user_by_telegram_id, get_or_create_user, update_user
from bot.middlewares.i18n import I18nMiddleware
from bot.keyboards.inline.language import get_language_keyboard
from bot.keyboards.reply.main_menu import get_main_menu


async def start_handler(
    message: Message,
    state: FSMContext,
    session,
    i18n,
    locale
):
    telegram_id = message.from_user.id
    full_name = message.from_user.full_name
    username = message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ –∫–æ–º–∞–Ω–¥–µ
    ref_code = None
    if message.text and len(message.text.split()) > 1:
        ref_code = message.text.split()[1].upper()

    user = await get_user_by_telegram_id(session, telegram_id)

    if user is None:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Å–æ–∑–¥–∞—ë–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º EN —Ç–µ–∫—Å—Ç + –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
        user = await get_or_create_user(
            session=session,
            telegram_id=telegram_id,
            full_name=full_name,
            username=username,
            ref_code=ref_code,
            default_lang='en',
        )

        en_texts = I18nMiddleware().translations.get("en", {})
        welcome_text = en_texts.get("welcome", "Welcome, {name}!").format(name=user.name or full_name)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –∫–æ–¥–µ, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
        if ref_code and user.referred_by:
            welcome_text += f"\n\nüé´ {en_texts.get('start.referral_used', 'Referral code used')}: {ref_code}"
        elif ref_code and not user.referred_by:
            welcome_text += f"\n\n‚ùå {en_texts.get('start.referral_invalid', 'Invalid referral code')}: {ref_code}"

        msg = await message.answer(welcome_text, reply_markup=get_language_keyboard())

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
        await state.update_data(welcome_msg_id=msg.message_id)
    else:
        # –£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –µ–≥–æ —è–∑—ã–∫–µ + reply-–∫–ª–∞–≤–∞
        lang = user.language or "ru"
        translations = I18nMiddleware().translations.get(lang, {})
        welcome_text = translations.get("welcome", "–ü—Ä–∏–≤–µ—Ç, {name}!").format(name=user.name or full_name)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –ø–µ—Ä–µ–¥–∞–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        if ref_code and not user.referred_by:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
            old_user = user
            user = await get_or_create_user(
                session=session,
                telegram_id=telegram_id,
                full_name=full_name,
                username=username,
                ref_code=ref_code,
                default_lang=user.language or 'ru',
            )
            
            if user.referred_by == ref_code:
                welcome_text += f"\n\nüé´ {translations.get('start.referral_applied', '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω')}: {ref_code}"
            else:
                welcome_text += f"\n\n‚ùå {translations.get('start.referral_invalid', '–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥')}: {ref_code}"
        
        reply_markup = get_main_menu(translations)
        await message.answer(welcome_text, reply_markup=reply_markup)


async def language_callback_handler(
    callback: CallbackQuery,
    state: FSMContext,
    session,
    i18n,
    locale,
    user,
    redis=None
):
    data = callback.data
    if not data.startswith("set_lang:"):
        return

    lang = data.split(":")[1]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—á–∏—â–∞–µ–º –∫—ç—à
    from bot.services.crud.user import update_user_with_cache_clear
    updated_user = await update_user_with_cache_clear(session, user.id, redis, language=lang)

    translations = I18nMiddleware().translations.get(lang, {})
    welcome_text = translations.get("welcome", "–ü—Ä–∏–≤–µ—Ç, {name}!").format(name=user.name or callback.from_user.full_name)
    alert_text = translations.get("language_set", "Language updated successfully!")

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ —è–∑—ã–∫–æ–≤–æ–π –∫–ª–∞–≤–æ–π
    state_data = await state.get_data()
    msg_id = state_data.get("welcome_msg_id")
    chat_id = callback.message.chat.id
    
    print(f"üîç –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:")
    print(f"   Chat ID: {chat_id}")
    print(f"   Message ID: {msg_id}")
    print(f"   Current message ID: {callback.message.message_id}")
    
    if msg_id:
        try:
            await callback.message.bot.delete_message(chat_id, msg_id)
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {e}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            try:
                await callback.message.delete()
                print("‚úÖ –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —É–¥–∞–ª–µ–Ω–æ")
            except Exception as e2:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}")
    else:
        print("‚ö†Ô∏è ID —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        try:
            await callback.message.delete()
            print("‚úÖ –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    reply_markup = get_main_menu(translations)
    await callback.message.answer(welcome_text, reply_markup=reply_markup)
    await callback.answer(alert_text, show_alert=True)


def register_start_handler(router):
    router.message.register(start_handler, Command("start"))
    router.callback_query.register(language_callback_handler, lambda c: c.data.startswith("set_lang:"))

__all__ = ["register_start_handler"]
