from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import F, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from bot.services.crud.plan import get_all_active_plans
from bot.services.crud.subscription import get_user_active_subscription, create_subscription
from bot.services.crud.user import add_balance_to_user, get_user_by_telegram_id
from bot.keyboards.inline.subscription import get_subscription_keyboard, get_balance_keyboard

router = Router()


class SubscriptionStates(StatesGroup):
    waiting_for_balance_amount = State()


async def subscription_handler(message: Message, session, i18n, user, **_):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞–Ω—ã
    plans = await get_all_active_plans(session)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_subscription = await get_user_active_subscription(session, user.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
    text = i18n.get("subscription.title", "üì¶ –ü–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
    text += "\n\n"
    
    if active_subscription:
        text += i18n.get("subscription.active_info", 
                        "‚úÖ <b>–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞:</b>\n"
                        "üì¶ –ü–ª–∞–Ω: {plan_name}\n"
                        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.\n"
                        "üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date}\n"
                        "üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {auto_renew}").format(
            plan_name=active_subscription.plan.name,
            price=active_subscription.plan.price,
            end_date=active_subscription.end_date.strftime("%d.%m.%Y"),
            auto_renew="–í–∫–ª—é—á–µ–Ω–æ" if active_subscription.auto_renew else "–û—Ç–∫–ª—é—á–µ–Ω–æ"
        )
    else:
        text += i18n.get("subscription.no_active", "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏</b>")
    
    text += "\n\n"
    text += i18n.get("subscription.balance_info", 
                    "üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {balance} —Ä—É–±.\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:").format(balance=user.cash or 0)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏
    keyboard = get_balance_keyboard(i18n, plans)
    
    await message.answer(text, reply_markup=keyboard)


async def balance_handler(callback: CallbackQuery, session, i18n, user, **_):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    
    text = i18n.get("balance.title", "üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
    text += "\n\n"
    text += i18n.get("balance.current", "–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.").format(balance=user.cash or 0)
    text += "\n\n"
    text += i18n.get("balance.enter_amount", 
                    "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ —Ä—É–±–ª—è—Ö):\n"
                    "–ú–∏–Ω–∏–º—É–º: 100 —Ä—É–±.\n"
                    "–ú–∞–∫—Å–∏–º—É–º: 10000 —Ä—É–±.")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—ã—Å—Ç—Ä—ã–º–∏ —Å—É–º–º–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="100 ‚ÇΩ", callback_data="balance:amount:100")],
        [InlineKeyboardButton(text="500 ‚ÇΩ", callback_data="balance:amount:500")],
        [InlineKeyboardButton(text="1000 ‚ÇΩ", callback_data="balance:amount:1000")],
        [InlineKeyboardButton(text="2000 ‚ÇΩ", callback_data="balance:amount:2000")],
        [InlineKeyboardButton(text="5000 ‚ÇΩ", callback_data="balance:amount:5000")],
        [InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Å—É–º–º—É", callback_data="balance:custom")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="subscription:back")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


async def balance_amount_handler(callback: CallbackQuery, session, i18n, user, redis, **_):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏–∑ callback_data
    amount_str = callback.data.split(":")[-1]
    try:
        amount = float(amount_str)
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    if amount < 100 or amount > 10000:
        await callback.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 100 –¥–æ 10000 —Ä—É–±–ª–µ–π", show_alert=True)
        return
    
    # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
    success = await add_balance_to_user(session, user.id, amount, redis)
    
    if success:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        updated_user = await get_user_by_telegram_id(session, user.telegram_id)
        
        text = i18n.get("balance.success", 
                       "‚úÖ <b>–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
                       "üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {amount} —Ä—É–±.\n"
                       "üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} —Ä—É–±.").format(
            amount=amount,
            new_balance=updated_user.cash
        )
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–Ω—É—Å–µ
        if user.referred_by_id:
            bonus_amount = amount * 0.1
            text += f"\n\nüéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å:</b> {bonus_amount} —Ä—É–±. –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É"
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö –ø–æ–¥–ø–∏—Å–∫–∞–º", callback_data="subscription:back")]
        ]))
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞", show_alert=True)
    
    await callback.answer()


async def balance_custom_handler(callback: CallbackQuery, state: FSMContext, i18n, **_):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã"""
    
    await state.set_state(SubscriptionStates.waiting_for_balance_amount)
    
    text = i18n.get("balance.custom_prompt", 
                   "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n\n"
                   "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—É–º–º–æ–π –≤ —Ä—É–±–ª—è—Ö.\n"
                   "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>1500</code>\n\n"
                   "–ú–∏–Ω–∏–º—É–º: 100 —Ä—É–±.\n"
                   "–ú–∞–∫—Å–∏–º—É–º: 10000 —Ä—É–±.")
    
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="balance:cancel")]
    ]))
    await callback.answer()


async def balance_custom_amount_handler(message: Message, state: FSMContext, session, i18n, user, redis, **_):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã"""
    
    try:
        amount = float(message.text)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    if amount < 100:
        await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 100 —Ä—É–±–ª–µ–π")
        return
    
    if amount > 10000:
        await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 10000 —Ä—É–±–ª–µ–π")
        return
    
    # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
    success = await add_balance_to_user(session, user.id, amount, redis)
    
    if success:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        updated_user = await get_user_by_telegram_id(session, user.telegram_id)
        
        text = i18n.get("balance.success", 
                       "‚úÖ <b>–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
                       "üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {amount} —Ä—É–±.\n"
                       "üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} —Ä—É–±.").format(
            amount=amount,
            new_balance=updated_user.cash
        )
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–Ω—É—Å–µ
        if user.referred_by_id:
            bonus_amount = amount * 0.1
            text += f"\n\nüéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å:</b> {bonus_amount} —Ä—É–±. –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É"
        
        await message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö –ø–æ–¥–ø–∏—Å–∫–∞–º", callback_data="subscription:back")]
        ]))
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")
    
    await state.clear()


async def balance_cancel_handler(callback: CallbackQuery, state: FSMContext, i18n, **_):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    
    await state.clear()
    
    text = i18n.get("balance.cancelled", "‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ö –ø–æ–¥–ø–∏—Å–∫–∞–º", callback_data="subscription:back")]
    ]))
    await callback.answer()


async def subscription_plans_handler(callback: CallbackQuery, session, i18n, user, **_):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞–Ω—ã
    plans = await get_all_active_plans(session)
    
    if not plans:
        text = i18n.get("subscription.no_plans", "‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫</b>\n\n–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.")
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="subscription:back")]
        ]))
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞–Ω–∞—Ö
    text = i18n.get("subscription.plans_title", "üì¶ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫</b>")
    text += "\n\n"
    
    for i, plan in enumerate(plans, 1):
        text += f"<b>{i}. {plan.name}</b>\n"
        text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {plan.price} —Ä—É–±.\n"
        text += f"üì± –ö–∞–Ω–∞–ª–æ–≤: {plan.channels_limit}\n"
        text += f"üìù –ü–æ—Å—Ç–æ–≤: {plan.posts_limit}\n"
        text += f"‚úèÔ∏è –†—É—á–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {plan.manual_posts_limit}\n"
        if plan.ai_priority:
            text += "ü§ñ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç AI: ‚úÖ\n"
        if plan.description:
            text += f"üìÑ {plan.description}\n"
        text += "\n"
    
    text += i18n.get("subscription.plans_info", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–ª–∞–Ω–∞–º–∏
    from bot.keyboards.inline.subscription import get_plans_keyboard
    keyboard = get_plans_keyboard(plans, i18n)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


async def plan_select_handler(callback: CallbackQuery, session, i18n, user, **_):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–ª–∞–Ω–∞ –∏–∑ callback_data
    plan_id_str = callback.data.split(":")[-1]
    try:
        plan_id = int(plan_id_str)
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω
    from bot.services.crud.plan import get_plan_by_id
    plan = await get_plan_by_id(session, plan_id)
    
    if not plan:
        await callback.answer("‚ùå –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from decimal import Decimal
    user_cash = Decimal(str(user.cash or 0))
    plan_price = Decimal(str(plan.price))
    
    if user_cash < plan_price:
        text = i18n.get("subscription.insufficient_balance", 
                       "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
                       "üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.\n"
                       "üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–ª–∞–Ω–∞: {price} —Ä—É–±.\n\n"
                       "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.").format(
            balance=user_cash,
            price=plan_price
        )
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="balance:topup")],
            [InlineKeyboardButton(text="üîô –ö –ø–ª–∞–Ω–∞–º", callback_data="subscription:plans")]
        ]))
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    remaining = user_cash - plan_price
    
    text = i18n.get("subscription.confirm_purchase", 
                   "‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</b>\n\n"
                   "üì¶ –ü–ª–∞–Ω: {plan_name}\n"
                   "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.\n"
                   "üì± –ö–∞–Ω–∞–ª–æ–≤: {channels}\n"
                   "üìù –ü–æ—Å—Ç–æ–≤: {posts}\n"
                   "‚úèÔ∏è –†—É—á–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {manual_posts}\n"
                   "ü§ñ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç AI: {ai_priority}\n\n"
                   "üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.\n"
                   "üí∏ –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: {remaining} —Ä—É–±.\n\n"
                   "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É:").format(
        plan_name=plan.name,
        price=plan_price,
        channels=plan.channels_limit,
        posts=plan.posts_limit,
        manual_posts=plan.manual_posts_limit,
        ai_priority="‚úÖ" if plan.ai_priority else "‚ùå",
        balance=user_cash,
        remaining=remaining
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"plan:confirm:{plan_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="subscription:plans")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


async def plan_confirm_handler(callback: CallbackQuery, session, i18n, user, redis, **_):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –ø–ª–∞–Ω–∞"""
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–ª–∞–Ω–∞ –∏–∑ callback_data
    plan_id_str = callback.data.split(":")[-1]
    try:
        plan_id = int(plan_id_str)
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω
    from bot.services.crud.plan import get_plan_by_id
    plan = await get_plan_by_id(session, plan_id)
    
    if not plan:
        await callback.answer("‚ùå –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –µ—â–µ —Ä–∞–∑
    from decimal import Decimal
    user_cash = Decimal(str(user.cash or 0))
    plan_price = Decimal(str(plan.price))
    
    if user_cash < plan_price:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    from datetime import datetime, timezone, timedelta
    start_date = datetime.now(timezone.utc)
    end_date = start_date + timedelta(days=30)  # 30 –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∞
    
    subscription = await create_subscription(
        session,
        user_id=user.id,
        plan_id=plan.id,
        start_date=start_date,
        end_date=end_date,
        status='active',
        auto_renew=True
    )
    
    if subscription:
        # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞
        user.cash = user_cash - plan_price
        await session.commit()
        
        # –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if redis and user.telegram_id:
            from bot.services.crud.user import clear_user_cache
            await clear_user_cache(redis, user.telegram_id)
        
        text = i18n.get("subscription.purchase_success", 
                       "üéâ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n\n"
                       "üì¶ –ü–ª–∞–Ω: {plan_name}\n"
                       "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.\n"
                       "üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date}\n"
                       "üí≥ –û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞: {balance} —Ä—É–±.\n\n"
                       "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–ª–∞–Ω–∞!").format(
            plan_name=plan.name,
            price=plan_price,
            end_date=end_date.strftime("%d.%m.%Y"),
            balance=user.cash
        )
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö –ø–æ–¥–ø–∏—Å–∫–∞–º", callback_data="subscription:back")]
        ]))
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
    
    await callback.answer()


async def subscription_back_handler(callback: CallbackQuery, session, i18n, user, **_):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞–Ω—ã
    plans = await get_all_active_plans(session)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_subscription = await get_user_active_subscription(session, user.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
    text = i18n.get("subscription.title", "üì¶ –ü–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
    text += "\n\n"
    
    if active_subscription:
        text += i18n.get("subscription.active_info", 
                        "‚úÖ <b>–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞:</b>\n"
                        "üì¶ –ü–ª–∞–Ω: {plan_name}\n"
                        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.\n"
                        "üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date}\n"
                        "üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {auto_renew}").format(
            plan_name=active_subscription.plan.name,
            price=active_subscription.plan.price,
            end_date=active_subscription.end_date.strftime("%d.%m.%Y"),
            auto_renew="–í–∫–ª—é—á–µ–Ω–æ" if active_subscription.auto_renew else "–û—Ç–∫–ª—é—á–µ–Ω–æ"
        )
    else:
        text += i18n.get("subscription.no_active", "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏</b>")
    
    text += "\n\n"
    text += i18n.get("subscription.balance_info", 
                    "üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {balance} —Ä—É–±.\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:").format(balance=user.cash or 0)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏
    keyboard = get_balance_keyboard(i18n, plans)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


def register_subscription_handlers(router: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã –ø–æ–¥–ø–∏—Å–æ–∫"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    router.message.register(subscription_handler, Command("subscription"))
    router.message.register(subscription_handler, F.text.lower().contains("–ø–æ–¥–ø–∏—Å–∫–∞"))
    router.message.register(subscription_handler, F.text.lower().contains("subscription"))
    
    # Callback —Ö–µ–Ω–¥–ª–µ—Ä—ã
    router.callback_query.register(balance_handler, F.data == "balance:topup")
    router.callback_query.register(balance_amount_handler, F.data.startswith("balance:amount:"))
    router.callback_query.register(balance_custom_handler, F.data == "balance:custom")
    router.callback_query.register(balance_cancel_handler, F.data == "balance:cancel")
    router.callback_query.register(subscription_back_handler, F.data == "subscription:back")
    router.callback_query.register(subscription_plans_handler, F.data == "subscription:plans")
    router.callback_query.register(plan_select_handler, F.data.startswith("plan:select:"))
    router.callback_query.register(plan_confirm_handler, F.data.startswith("plan:confirm:"))
    
    # FSM —Ö–µ–Ω–¥–ª–µ—Ä—ã
    router.message.register(balance_custom_amount_handler, SubscriptionStates.waiting_for_balance_amount)


__all__ = ["register_subscription_handlers"] 