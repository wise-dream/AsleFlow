import asyncio
from datetime import datetime, timezone
from typing import Optional
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from aiogram import Bot

from bot.models.models import Post, UserWorkflow, WorkflowSettings, SocialAccount
from bot.services.crud.post import update_post


class PublishingService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏"""

    def __init__(self, bot: Bot):
        self.bot = bot

    async def publish_post(self, session: AsyncSession, post_id: int) -> bool:
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª

        Args:
            session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            post_id: ID –ø–æ—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

        Returns:
            bool: True –µ—Å–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç —Å –≤—Å–µ–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            post_data = await self._get_post_with_details(session, post_id)
            if not post_data:
                return False

            post, workflow, settings, social_account = post_data

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Å—Ç –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            if post.status not in ["pending", "scheduled"]:
                return False

            # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            success = False
            if social_account.platform == "telegram":
                success = await self._publish_to_telegram(post, social_account)
            else:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
                print(f"Platform {social_account.platform} not supported yet")
                return False

            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞
                await update_post(
                    session,
                    post_id,
                    status="published",
                    published_time=datetime.now(timezone.utc)
                )
                return True
            else:
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π
                await update_post(session, post_id, status="failed")
                return False
                
        except Exception as e:
            print(f"Error publishing post {post_id}: {e}")
            try:
                await update_post(session, post_id, status="failed")
            except:
                pass
            return False
    
    async def _get_post_with_details(self, session: AsyncSession, post_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞:
        1) –ü–æ—Å—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ workflow (—á–µ—Ä–µ–∑ WorkflowSettings ‚Üí SocialAccount)
        2) –ü–æ—Å—Ç –∏–º–µ–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ SocialAccount (manual –±–µ–∑ workflow)
        """
        # –ü–æ–ø—ã—Ç–∫–∞ ‚Ññ1: –ø–æ–ª–Ω—ã–π –ø—É—Ç—å —á–µ—Ä–µ–∑ workflow/settings
        try:
            query = (
                select(Post, UserWorkflow, WorkflowSettings, SocialAccount)
                .join(UserWorkflow, Post.user_workflow_id == UserWorkflow.id)
                .join(WorkflowSettings, WorkflowSettings.user_workflow_id == UserWorkflow.id)
                .join(SocialAccount, WorkflowSettings.social_account_id == SocialAccount.id)
                .where(Post.id == post_id)
            )
            result = await session.execute(query)
            row = result.first()
            if row:
                return row.Post, row.UserWorkflow, row.WorkflowSettings, row.SocialAccount
        except Exception:
            pass

        # –ü–æ–ø—ã—Ç–∫–∞ ‚Ññ2: –±–µ–∑ workflow, –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Post.social_account_id
        try:
            query2 = (
                select(Post, SocialAccount)
                .join(SocialAccount, Post.social_account_id == SocialAccount.id)
                .where(Post.id == post_id)
            )
            result2 = await session.execute(query2)
            row2 = result2.first()
            if row2:
                # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º: –≤–µ—Ä–Ω–µ–º workflow/settings –∫–∞–∫ None
                return row2.Post, None, None, row2.SocialAccount
        except Exception:
            pass

        return None
    
    async def _publish_to_telegram(self, post: Post, social_account: SocialAccount) -> bool:
        """–ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –≤ Telegram –∫–∞–Ω–∞–ª"""
        try:
            chat_id = social_account.telegram_chat_id
            if not chat_id:
                print(f"No telegram_chat_id for social account {social_account.id}")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            message_text = f"üìù <b>{post.topic}</b>\n\n{post.content}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=chat_id,
                text=message_text,
                parse_mode="HTML"
            )
            
            print(f"Successfully published post {post.id} to Telegram channel {chat_id}")
            return True
            
        except Exception as e:
            print(f"Error publishing to Telegram: {e}")
            return False
    
    async def schedule_post_for_publishing(self, session: AsyncSession, post_id: int) -> bool:
        """
        –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ—Å—Ç –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–∏–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ scheduled)
        
        Args:
            session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö  
            post_id: ID –ø–æ—Å—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω
        """
        try:
            updated_post = await update_post(
                session,
                post_id,
                status="scheduled",
                moderated=True
            )
            return updated_post is not None
        except Exception as e:
            print(f"Error scheduling post {post_id}: {e}")
            return False
    
    async def get_pending_posts(self, session: AsyncSession) -> list[Post]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–æ—Å—Ç—ã –≥–æ—Ç–æ–≤—ã–µ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        query = (
            select(Post)
            .where(
                Post.status == "scheduled",
                Post.scheduled_time <= datetime.now(timezone.utc)
            )
            .order_by(Post.scheduled_time)
        )
        
        result = await session.execute(query)
        return list(result.scalars().all())
    
    async def run_publishing_cycle(self, session: AsyncSession):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - –ø—É–±–ª–∏–∫—É–µ—Ç –≤—Å–µ –≥–æ—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã
        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
        """
        pending_posts = await self.get_pending_posts(session)
        
        # –ü—É–±–ª–∏–∫—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Å—Ç–µ–ø–µ–Ω–∏ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
        semaphore = asyncio.Semaphore(5)

        async def _worker(p):
            async with semaphore:
                success = await self.publish_post(session, p.id)
                if success:
                    print(f"Published post {p.id}: {p.topic}")
                else:
                    print(f"Failed to publish post {p.id}: {p.topic}")
                await asyncio.sleep(0.5)

        await asyncio.gather(*[ _worker(p) for p in pending_posts ])

    async def get_posts_for_n8n(self, session: AsyncSession, limit: int = 10) -> list[dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç—ã –≥–æ—Ç–æ–≤—ã–µ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è n8n
        
        Args:
            session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
            
        Returns:
            list[dict]: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –≥–æ—Ç–æ–≤—ã–µ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            posts = await self.get_pending_posts(session)
            
            result = []
            for post in posts[:limit]:
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                post_data = await self._get_post_with_details(session, post.id)
                if not post_data:
                    continue
                    
                post_obj, workflow, settings, social_account = post_data
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è n8n
                post_info = {
                    "post_id": post_obj.id,
                    "topic": post_obj.topic,
                    "content": post_obj.content,
                    "media_type": post_obj.media_type,
                    "media_url": post_obj.media_url,
                    "scheduled_time": post_obj.scheduled_time.isoformat() if post_obj.scheduled_time else None,
                    "platform": social_account.platform,
                    "channel_id": social_account.channel_id,
                    "channel_name": social_account.channel_name,
                    "telegram_chat_id": social_account.telegram_chat_id,
                    "access_token": social_account.access_token,
                    "user_id": workflow.user_id,
                    "workflow_id": workflow.id,
                    "workflow_name": workflow.name
                }
                
                result.append(post_info)
            
            return result
            
        except Exception as e:
            print(f"Error getting posts for n8n: {e}")
            return []
    
    async def mark_post_as_published(self, session: AsyncSession, post_id: int, external_id: str = None) -> bool:
        """
        –ü–æ–º–µ—á–∞–µ—Ç –ø–æ—Å—Ç –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è n8n –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏)
        
        Args:
            session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            post_id: ID –ø–æ—Å—Ç–∞
            external_id: –í–Ω–µ—à–Ω–∏–π ID –ø–æ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ID –≤ Telegram)
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω
        """
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞
            success = await update_post(
                session,
                post_id,
                status="published",
                published_time=datetime.now(timezone.utc)
            )
            
            if success and external_id:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å external_id –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                # await update_post(session, post_id, external_id=external_id)
                pass
            
            return success
            
        except Exception as e:
            print(f"Error marking post as published: {e}")
            return False
    
    async def mark_post_as_failed(self, session: AsyncSession, post_id: int, error_message: str = None) -> bool:
        """
        –ü–æ–º–µ—á–∞–µ—Ç –ø–æ—Å—Ç –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è n8n –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏)
        
        Args:
            session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            post_id: ID –ø–æ—Å—Ç–∞
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω
        """
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞
            success = await update_post(
                session,
                post_id,
                status="failed"
            )
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å error_message –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if error_message:
                print(f"Post {post_id} failed: {error_message}")
            
            return success
            
        except Exception as e:
            print(f"Error marking post as failed: {e}")
            return False
    
    async def get_posts_stats_for_n8n(self, session: AsyncSession, user_id: int = None) -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å—Ç–æ–≤ –¥–ª—è n8n
        
        Args:
            session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤
        """
        try:
            from sqlalchemy import func
            
            # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            query = select(
                Post.status,
                func.count(Post.id).label('count')
            ).group_by(Post.status)
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if user_id:
                query = query.join(UserWorkflow).where(UserWorkflow.user_id == user_id)
            
            result = await session.execute(query)
            stats = result.all()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_dict = {
                'pending': 0,
                'scheduled': 0,
                'published': 0,
                'failed': 0,
                'total': 0
            }
            
            for status, count in stats:
                stats_dict[status] = count
                stats_dict['total'] += count
            
            return stats_dict
            
        except Exception as e:
            print(f"Error getting posts stats: {e}")
            return {
                'pending': 0,
                'scheduled': 0,
                'published': 0,
                'failed': 0,
                'total': 0
            } 