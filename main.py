import asyncio
from bot import config
from sqlalchemy import text
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.types import BotCommand

from bot.handlers.workflows import register_workflow_handlers
from db.connection import AsyncSessionLocal, get_redis
from bot.middlewares.db import DatabaseSessionMiddleware
from bot.middlewares.auth import AuthMiddleware
from bot.middlewares.i18n import I18nMiddleware
from bot.middlewares.logging import LoggingMiddleware
from bot.middlewares.redis import RedisMiddleware
from bot.handlers.basic import register_basic_handlers
from bot.handlers.socials import register_socials_handlers
from bot.handlers.posts import register_posts_handlers


def register_all_handlers(dp: Dispatcher):
    register_basic_handlers(dp)
    register_socials_handlers(dp)
    register_workflow_handlers(dp)
    register_posts_handlers(dp)


async def set_middlewares(dp: Dispatcher, redis):
    dp.update.middleware(LoggingMiddleware())
    dp.update.middleware(DatabaseSessionMiddleware())
    dp.update.middleware(RedisMiddleware(redis))
    dp.update.middleware(AuthMiddleware(redis))
    dp.update.middleware(I18nMiddleware())


async def set_bot_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="help", description="‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        BotCommand(command="workflows", description="üß† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"),
        BotCommand(command="accounts", description="üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"),
        BotCommand(command="posts", description="üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏"),
        BotCommand(command="about", description="üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ"),
        BotCommand(command="settings", description="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"),
        BotCommand(command="test_ai", description="ü§ñ –¢–µ—Å—Ç OpenAI API"),
    ]
    await bot.set_my_commands(commands)


async def on_startup():
    from db.connection import test_db_connection
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_ok = await test_db_connection()
    if not db_ok:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª–µ .env")
        return
    
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")


async def on_shutdown():
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ (—à–µ–¥—É–ª–µ—Ä), –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã
    try:
        global _scheduler_task
        if _scheduler_task:
            _scheduler_task.cancel()
    except Exception:
        pass
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º Redis
    redis = await get_redis()
    await redis.aclose()


async def main():
    bot = Bot(token=config.BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher()

    redis = await get_redis()
    await set_middlewares(dp, redis)
    register_all_handlers(dp)

    await on_startup()
    await set_bot_commands(bot)
    print("Bot started!")
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π —à–µ–¥—É–ª–µ—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    async def start_scheduler(bot: Bot):
        from bot.services.publishing.publisher import PublishingService
        svc = PublishingService(bot)
        while True:
            try:
                async with AsyncSessionLocal() as session:
                    await svc.run_publishing_cycle(session)
            except Exception as e:
                print(f"Scheduler error: {e}")
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
            await asyncio.sleep(60)

    global _scheduler_task
    _scheduler_task = asyncio.create_task(start_scheduler(bot))
    await dp.start_polling(bot, shutdown=on_shutdown)


if __name__ == "__main__":
    asyncio.run(main())
